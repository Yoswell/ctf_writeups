from Crypto.Util.number import long_to_bytes
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from hashlib import sha256
from sympy.ntheory import discrete_log

def main():
    p = 83655328688771926877945179027366607744384681331519953124907639300905842414671270777934535130640548351027802643848860013701700337976871173013705889203289865538746147307
    g = 35253714237281791991926629294901856900223326947986323485394196986722802413136231509593285391312007238016047905445204427220232493971682517602996374522855688837161573968
    A = 29712757199478942050934069192885884246289584945965088226652491943523336879202312127667332912883867594144811999570394503238014078190538726946784397344545346844464977923
    B = 44853145979057589932408126562862980384409695117264677167074446324950151475556458117479457674504946419910715510390058605135361568900475627467667038302501816002714520864
    flag = '08be59873a38d6e74980572a821fec1dca7e9b05cb456bd57bf407d9b30a8d5e'

    try:
        # Esconder b dentro de B
        # B = pow(g, b, p)
        # B = g^b mod p

        # Logaritmo discreto discrete_log
        # b = discrete_log(p, B, g)
        # b = p^B mod g

        b = discrete_log(p, B, g)
        ss = pow(A, b, p)

        key = sha256(long_to_bytes(ss)).digest()[:16]
        cipher = AES.new(key, AES.MODE_ECB)
        ct = bytes.fromhex(flag)
        pt = unpad(cipher.decrypt(ct), 16)
        
        print(pt.decode())

    except: pass

if __name__ == '__main__':
    main()